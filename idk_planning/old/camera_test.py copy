#!/usr/bin/env python

"""
    moveit_cartesian_path.py - Version 0.1 2016-07-28

    Based on the R. Patrick Goebel's moveit_cartesian_demo.py demo code.

    Plan and execute a Cartesian path for the end-effector.

    Created for the Pi Robot Project: http://www.pirobot.org
    Copyright (c) 2014 Patrick Goebel.  All rights reserved.
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.5

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details at:

    http://www.gnu.org/licenses/gpl.html
"""

import rospy, sys, numpy as np
import moveit_commander
from copy import deepcopy
import geometry_msgs.msg
import moveit_msgs.msg
import cv2, cv_bridge
from sensor_msgs.msg import Image


from std_msgs.msg import Header
from trajectory_msgs.msg import JointTrajectory
from trajectory_msgs.msg import JointTrajectoryPoint

def nothing(_):
    pass

class ur5_vision:
    def __init__(self):
        rospy.init_node("ur5_vision", anonymous=False)
        self.track_flag = False
        self.default_pose_flag = True
        self.cx = 400.0
        self.cy = 400.0
        self.bridge = cv_bridge.CvBridge()
        self.image_sub = rospy.Subscriber('/camera/color/image_raw', Image, self.image_callback)
        cv2.namedWindow('Display')
        # cv2.createTrackbar('Upper Area Limit', 'Display', 6000, nothing)       
        # cv2.createTrackbar('Lower Area Limit', 'Display', , nothing)       

    def image_callback(self, msg):
        image = self.bridge.imgmsg_to_cv2(msg,desired_encoding='bgr8')
        
        # image = cv2.medianBlur(image, 5)
        blur_image = cv2.GaussianBlur(image,(5,5),0)
        blur_image = cv2.GaussianBlur(blur_image,(5,5),0)
        
        img_gray = cv2.cvtColor(blur_image, cv2.COLOR_BGR2GRAY)
        
        # _, thresh = cv2.threshold(img_gray, 150, 255, cv2.THRESH_BINARY)
        # _, thresh = cv2.threshold(img_gray, 150, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        thresh = cv2.adaptiveThreshold(img_gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 11, 2)
        
        _, contours, _ = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)

        area_limit = cv2.getTrackbarPos('Area Limit','Display')
        large_contours = [c for c in contours if cv2.contourArea(c) >= area_limit]

        cv2.drawContours(image, large_contours, -1, (0, 255, 0), 2)
        cv2.imshow('Display', image)
        cv2.waitKey(1)
        
        # END BRIDGE
        # BEGIN HSV
        # hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
        

        # END HSV
        # BEGIN FILTER
        # lower_red = np.array([ 0,  100, 100])
        # upper_red = np.array([10, 255, 255])
        # mask = cv2.inRange(hsv, lower_red, upper_red)
        # (_, cnts, _) = cv2.findContours(hsv, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
        #area = cv2.contourArea(cnts)
        # h, w, d = image.shape
        # print h, w, d  (800,800,3)
        #BEGIN FINDER
        # M = cv2.moments(image)
        # if M['m00'] > 0:
        #     cx = int(M['m10']/M['m00'])
        #     cy = int(M['m01']/M['m00'])

        # cv2.drawContours(image, cnts, -1, (0, 255, 0), 2)
        # cv2.namedWindow("window", 1)
        # cv2.imshow("window", image)
        # cv2.waitKey(1)

follower=ur5_vision()
rospy.spin()
